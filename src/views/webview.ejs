<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>AugmentOS RTMP Control</title>
    <link rel="stylesheet" href="/css/style.css">
    <style>
        body {
            font-family: sans-serif;
            margin: 20px;
            background-color: #f4f4f4;
            color: #333;
        }
        .container {
            background-color: #fff;
            padding: 20px;
            border-radius: 8px;
            box-shadow: 0 0 10px rgba(0,0,0,0.1);
        }
        .user-info,
        .rtmp-control,
        .stream-status-container,
        .detected-faces-section,
        .stream-player-section {
            margin-bottom: 20px;
        }
        .user-id {
            font-weight: bold;
            color: #007bff;
        }
        label {
            display: block;
            margin-bottom: 5px;
        }
        input[type="text"] {
            width: calc(100% - 22px);
            padding: 10px;
            margin-bottom: 10px;
            border: 1px solid #ddd;
            border-radius: 4px;
        }
        button {
            padding: 10px 15px;
            margin-right: 10px;
            border: none;
            border-radius: 4px;
            cursor: pointer;
            font-size: 1em;
        }
        .btn-start {
            background-color: #28a745;
            color: white;
        }
        .btn-stop {
            background-color: #dc3545;
            color: white;
        }
        .btn-update {
            background-color: #007bff;
            color: white;
        }
        .status-active {
            color: green;
            font-weight: bold;
        }
        .status-stopped {
            color: red;
            font-weight: bold;
        }
        .status-error {
            color: orange;
            font-weight: bold;
        }
        .status-initializing,
        .status-busy {
            color: #6c757d;
            font-weight: bold;
        }
        #streamStatus, #streamStats {
            padding: 10px;
            background-color: #e9ecef;
            border-radius: 4px;
            white-space: pre-wrap; /* To show formatted JSON */
        }
        .hidden { display: none; }
        .error-message { color: red; margin-top: 10px; }
        .success-message { color: green; margin-top: 10px; }
        
        /* Face detection styles */
        .faces-container {
            display: grid;
            grid-template-columns: repeat(auto-fill, minmax(200px, 1fr));
            gap: 20px;
            margin-top: 20px;
        }
        .face-card {
            border: 1px solid #ddd;
            border-radius: 8px;
            padding: 15px;
            text-align: center;
            background-color: #f9f9f9;
        }
        .face-image {
            width: 100%;
            height: 150px;
            object-fit: cover;
            border-radius: 4px;
            margin-bottom: 10px;
        }
        .face-label {
            font-weight: bold;
            margin-bottom: 10px;
        }
        .rename-container {
            margin-top: 10px;
        }
        .rename-input {
            width: 100%;
            padding: 5px;
            margin-bottom: 5px;
            border: 1px solid #ccc;
            border-radius: 4px;
        }
        .rename-button {
            padding: 5px 10px;
            background-color: #17a2b8;
            color: white;
            border: none;
            border-radius: 4px;
            cursor: pointer;
            font-size: 0.9em;
        }
        .rename-button:hover {
            background-color: #138496;
        }
        .no-faces-message {
            text-align: center;
            color: #666;
            padding: 20px;
        }
        
        /* Stream mode selection styles */
        .stream-mode-selection {
            margin: 15px 0;
            padding: 15px;
            background-color: #f8f9fa;
            border-radius: 4px;
        }
        .mode-option {
            margin: 5px 0;
        }
        .mode-option input[type="radio"] {
            margin-right: 8px;
        }
        
        /* Video player styles */
        .video-container {
            position: relative;
            width: 100%;
            max-width: 800px;
            margin: 0 auto;
            background-color: #000;
            border-radius: 8px;
            overflow: hidden;
        }
        #hlsPlayer {
            width: 100%;
            height: auto;
            max-height: 450px;
        }
        .video-loading {
            position: absolute;
            top: 50%;
            left: 50%;
            transform: translate(-50%, -50%);
            color: white;
            font-size: 18px;
        }
        .rtmp-url-section {
            transition: opacity 0.3s ease;
        }
        .rtmp-url-section.dimmed {
            opacity: 0.5;
        }
    </style>
</head>
<body>
    <div class="container">
        <header>
            <h1>RTMP Stream Control</h1>
        </header>

        <div class="user-info">
            <% if (userId) { %>
                <p>User ID: <span class="user-id"><%= userId %></span></p>
            <% } else { %>
                <p><span class="user-id">Not Authenticated</span> - Please open from AugmentOS app. Controls may not work.</p>
            <% } %>
        </div>

        <% if (userId) { %>
            <div class="stream-actions">
                <h2>Stream Settings</h2>
                
                <div class="stream-mode-selection">
                    <label><strong>Stream Output Mode:</strong></label>
                    <div class="mode-option">
                        <label>
                            <input type="radio" name="streamMode" value="hls" <%= (!locals.streamMode || streamMode === 'hls') ? 'checked' : '' %>>
                            Stream to Web View (HLS) - View stream directly in browser with face highlighting
                        </label>
                    </div>
                    <div class="mode-option">
                        <label>
                            <input type="radio" name="streamMode" value="rtmp" <%= (locals.streamMode && streamMode === 'rtmp') ? 'checked' : '' %>>
                            Stream to RTMP URL - Send to external service
                        </label>
                    </div>
                </div>
                
                <div id="rtmpUrlSection" class="rtmp-control rtmp-url-section <%= (!locals.streamMode || streamMode === 'hls') ? 'dimmed' : '' %>">
                    <label for="rtmpUrlInput">RTMP URL (for external streaming):</label>
                    <input type="text" id="rtmpUrlInput" value="<%= rtmpUrl || '' %>">
                    <button id="updateRtmpUrlButton" class="btn-update">Update URL</button>
                </div>

                <div style="margin-bottom: 15px;">
                    <label>
                        <input type="checkbox" id="highlightFacesCheckbox" style="margin-right: 8px;">
                        Highlight Faces (always on for HLS mode)
                    </label>
                </div>
                
                <button id="startStreamButton" class="btn-start">Start Stream</button>
                <button id="stopStreamButton" class="btn-stop">Stop Stream</button>
            </div>
        <% } %>

        <div id="streamPlayerSection" class="stream-player-section <%= (!locals.hlsUrl) ? 'hidden' : '' %>">
            <h2>Live Stream</h2>
            <div class="video-container">
                <div id="videoLoading" class="video-loading hidden">Loading stream...</div>
                <video id="hlsPlayer" controls playsinline webkit-playsinline>
                    Your browser does not support video playback.
                </video>
            </div>
        </div>

        <div class="stream-status-container">
            <h2>Current Stream Status</h2>
            <div id="currentStatusText"></div>
            <pre id="streamStatus"><%= JSON.stringify(streamStatus, null, 2) %></pre>
            <h2>Stream Stats</h2>
            <pre id="streamStats"><%= JSON.stringify(streamStatus && streamStatus.stats ? streamStatus.stats : {}, null, 2) %></pre>
        </div>

        <div id="detectedFacesSection" class="detected-faces-section <%= faceHighlightingEnabled ? '' : 'hidden' %>">
            <h2>Detected Faces</h2>
            <button id="refreshFacesButton" class="btn-update">Refresh Faces</button>
            <div id="facesContainer" class="faces-container"></div>
        </div>

        <div id="messageArea" class="message-area"></div>

    </div>

    <!-- Include HLS.js library -->
    <script src="https://unpkg.com/hls.js@latest"></script>
    
    <script>
        const rtmpUrlInput = document.getElementById('rtmpUrlInput');
        const updateRtmpUrlButton = document.getElementById('updateRtmpUrlButton');
        const startStreamButton = document.getElementById('startStreamButton');
        const stopStreamButton = document.getElementById('stopStreamButton');
        const streamStatusDiv = document.getElementById('streamStatus');
        const streamStatsDiv = document.getElementById('streamStats');
        const currentStatusTextDiv = document.getElementById('currentStatusText');
        const messageArea = document.getElementById('messageArea');
        const highlightFacesCheckbox = document.getElementById('highlightFacesCheckbox');
        const detectedFacesSection = document.getElementById('detectedFacesSection');
        const facesContainer = document.getElementById('facesContainer');
        const refreshFacesButton = document.getElementById('refreshFacesButton');
        const streamPlayerSection = document.getElementById('streamPlayerSection');
        const hlsPlayer = document.getElementById('hlsPlayer');
        const videoLoading = document.getElementById('videoLoading');
        const rtmpUrlSection = document.getElementById('rtmpUrlSection');
        const streamModeRadios = document.querySelectorAll('input[name="streamMode"]');

        const currentUserId = '<%= userId %>'; // Will be empty if not authenticated
        let faceHighlightingEnabled = <%= typeof faceHighlightingEnabled !== 'undefined' ? faceHighlightingEnabled : false %>;
        let currentHlsUrl = '<%= typeof hlsUrl !== 'undefined' && hlsUrl ? hlsUrl : "" %>';
        let currentStreamMode = '<%= typeof streamMode !== 'undefined' ? streamMode : "hls" %>';
        let hlsInstance = null;

        // Handle stream mode changes
        streamModeRadios.forEach(radio => {
            radio.addEventListener('change', (e) => {
                currentStreamMode = e.target.value;
                
                // Update UI based on mode
                if (currentStreamMode === 'hls') {
                    rtmpUrlSection.classList.add('dimmed');
                    highlightFacesCheckbox.checked = true;
                    highlightFacesCheckbox.disabled = true;
                } else {
                    rtmpUrlSection.classList.remove('dimmed');
                    highlightFacesCheckbox.disabled = false;
                }
            });
        });

        // Initialize checkbox state based on current mode
        if (currentStreamMode === 'hls') {
            highlightFacesCheckbox.checked = true;
            highlightFacesCheckbox.disabled = true;
        }

        function initializeHlsPlayer(hlsUrl) {
            if (!hlsUrl) return;
            
            currentHlsUrl = hlsUrl;
            streamPlayerSection.classList.remove('hidden');
            videoLoading.classList.remove('hidden');

            if (Hls.isSupported()) {
                if (hlsInstance) {
                    hlsInstance.destroy();
                }
                hlsInstance = new Hls({
                    maxBufferLength: 10,
                    maxMaxBufferLength: 30,
                    maxLoadingDelay: 2,
                    liveSyncDuration: 2,
                    liveMaxLatencyDuration: 5,
                });
                
                hlsInstance.loadSource(hlsUrl);
                hlsInstance.attachMedia(hlsPlayer);
                
                hlsInstance.on(Hls.Events.MANIFEST_PARSED, function() {
                    videoLoading.classList.add('hidden');
                    hlsPlayer.play().catch(e => {
                        console.log('Autoplay prevented:', e);
                    });
                });
                
                hlsInstance.on(Hls.Events.ERROR, function(event, data) {
                    console.error('HLS.js error:', data);
                    if (data.fatal) {
                        videoLoading.textContent = 'Stream error. Retrying...';
                        setTimeout(() => {
                            if (hlsInstance) {
                                hlsInstance.loadSource(hlsUrl);
                            }
                        }, 3000);
                    }
                });
            } else if (hlsPlayer.canPlayType('application/vnd.apple.mpegurl')) {
                // Native HLS support (Safari/iOS)
                hlsPlayer.src = hlsUrl;
                videoLoading.classList.add('hidden');
                hlsPlayer.addEventListener('loadedmetadata', function() {
                    hlsPlayer.play().catch(e => {
                        console.log('Autoplay prevented:', e);
                    });
                });
            } else {
                console.error('HLS is not supported in this browser');
                videoLoading.textContent = 'HLS not supported in this browser';
            }
        }

        function stopHlsPlayer() {
            if (hlsInstance) {
                hlsInstance.destroy();
                hlsInstance = null;
            }
            if (hlsPlayer) {
                hlsPlayer.src = '';
            }
            streamPlayerSection.classList.add('hidden');
        }

        function showMessage(text, isError = false) {
            messageArea.textContent = text;
            messageArea.className = isError ? 'error-message' : 'success-message';
        }

        async function fetchStreamInfo() {
            try {
                const response = await fetch('/api/stream-info');
                const data = await response.json();
                if (streamStatusDiv) streamStatusDiv.textContent = JSON.stringify(data.streamStatus || {}, null, 2);
                if (streamStatsDiv) streamStatsDiv.textContent = JSON.stringify(data.streamStatus && data.streamStatus.stats ? data.streamStatus.stats : {}, null, 2);
                updateStatusText(data.streamStatus);
                
                // Update face highlighting state and UI
                faceHighlightingEnabled = data.faceHighlightingEnabled || false;
                if (detectedFacesSection) {
                    if (faceHighlightingEnabled) {
                        detectedFacesSection.classList.remove('hidden');
                    } else {
                        detectedFacesSection.classList.add('hidden');
                    }
                }

                // Handle HLS URL updates
                if (data.hlsUrl && data.hlsUrl !== currentHlsUrl) {
                    initializeHlsPlayer(data.hlsUrl);
                } else if (!data.hlsUrl && currentHlsUrl) {
                    stopHlsPlayer();
                    currentHlsUrl = '';
                }

                // Update stream mode if changed
                if (data.streamMode && data.streamMode !== currentStreamMode) {
                    currentStreamMode = data.streamMode;
                    const modeRadio = document.querySelector(`input[name="streamMode"][value="${currentStreamMode}"]`);
                    if (modeRadio) modeRadio.checked = true;
                }
            } catch (error) {
                console.error('Error fetching stream info:', error);
                if (streamStatusDiv) streamStatusDiv.textContent = 'Error fetching status.';
                if (streamStatsDiv) streamStatsDiv.textContent = 'N/A';
                updateStatusText(null);
            }
        }

        async function fetchDetectedFaces() {
            if (!currentUserId || !faceHighlightingEnabled) return;

            try {
                const response = await fetch('/api/faces');
                const data = await response.json();

                if (!data.success) {
                    facesContainer.innerHTML = '<div class="no-faces-message">Error loading faces</div>';
                    return;
                }

                if (!data.faces || data.faces.length === 0) {
                    facesContainer.innerHTML = '<div class="no-faces-message">No faces detected yet. Faces appear after being visible for more than 1 second.</div>';
                    return;
                }

                // Create face cards
                facesContainer.innerHTML = data.faces.map((face, index) => `
                    <div class="face-card">
                        <img src="${face.image_data}" alt="${face.label}" class="face-image">
                        <div class="face-label">${face.label}</div>
                        <div class="rename-container">
                            <input type="text" 
                                   class="rename-input" 
                                   id="rename-input-${index}" 
                                   placeholder="New name">
                            <button class="rename-button" 
                                    onclick="renameFace('${face.label}', ${index})">
                                Rename
                            </button>
                        </div>
                    </div>
                `).join('');

            } catch (error) {
                console.error('Error fetching faces:', error);
                facesContainer.innerHTML = '<div class="no-faces-message">Error loading detected faces</div>';
            }
        }

        async function renameFace(oldLabel, inputIndex) {
            const newLabel = document.getElementById(`rename-input-${inputIndex}`).value.trim();
            
            if (!newLabel) {
                showMessage('Please enter a new name', true);
                return;
            }

            if (newLabel === oldLabel) {
                showMessage('New name is the same as the old name', true);
                return;
            }

            try {
                const response = await fetch('/api/faces/rename', {
                    method: 'PUT',
                    headers: { 'Content-Type': 'application/json' },
                    body: JSON.stringify({ old_label: oldLabel, new_label: newLabel })
                });

                const result = await response.json();

                if (result.success) {
                    showMessage(`Successfully renamed "${oldLabel}" to "${newLabel}"`);
                    // Refresh the faces display
                    await fetchDetectedFaces();
                } else {
                    showMessage(result.message || 'Failed to rename face', true);
                }
            } catch (error) {
                console.error('Error renaming face:', error);
                showMessage('Error renaming face', true);
            }
        }

        function updateStatusText(statusObj) {
            if (!currentStatusTextDiv) return;
            if (!statusObj || !statusObj.status) {
                currentStatusTextDiv.textContent = 'Status: Unknown';
                currentStatusTextDiv.className = '';
                return;
            }
            currentStatusTextDiv.textContent = `Status: ${statusObj.status.toUpperCase()}`;
            currentStatusTextDiv.className = `status-${statusObj.status.toLowerCase()}`;
        }

        if (updateRtmpUrlButton) {
            updateRtmpUrlButton.addEventListener('click', async () => {
                if (!currentUserId) {
                    showMessage('Not authenticated. Cannot update URL.', true);
                    return;
                }

                const newRtmpUrl = rtmpUrlInput.value.trim();

                // Basic client-side validation
                if (!newRtmpUrl) {
                    showMessage('RTMP URL cannot be empty.', true);
                    return;
                }

                // Basic RTMP URL format validation
                if (!newRtmpUrl.startsWith('rtmp://') && !newRtmpUrl.startsWith('rtmps://')) {
                    if (!confirm('The URL does not start with rtmp:// or rtmps://. Are you sure you want to continue?')) {
                        return;
                    }
                }

                showMessage('Updating RTMP URL...');

                try {
                    const response = await fetch('/api/rtmp-url', {
                        method: 'POST',
                        headers: { 'Content-Type': 'application/json' },
                        body: JSON.stringify({ rtmpUrl: newRtmpUrl })
                    });

                    const result = await response.json();

                    if (result.success) {
                        showMessage(`RTMP URL updated successfully to: ${result.newRtmpUrl}`);
                        fetchStreamInfo(); // Refresh stream info to reflect changes
                    } else {
                        showMessage(result.message || 'Failed to update RTMP URL.', true);
                    }
                } catch (error) {
                    console.error('Error updating RTMP URL:', error);
                    showMessage('Network error while updating RTMP URL.', true);
                }
            });
        }

        if (startStreamButton) {
            startStreamButton.addEventListener('click', async () => {
                if (!currentUserId) { showMessage('Not authenticated. Cannot start stream.', true); return; }
                
                const currentRtmpUrl = rtmpUrlInput ? rtmpUrlInput.value : null;
                let highlightFaces = highlightFacesCheckbox ? highlightFacesCheckbox.checked : false;
                const streamMode = currentStreamMode;
                
                // Force highlight faces for HLS mode
                if (streamMode === 'hls') {
                    highlightFaces = true;
                }
                
                showMessage('Requesting to start stream...');
                try {
                    const response = await fetch('/api/start-stream', {
                        method: 'POST',
                        headers: { 'Content-Type': 'application/json' },
                        body: JSON.stringify({ 
                            rtmpUrl: currentRtmpUrl,
                            highlightFaces: highlightFaces,
                            streamMode: streamMode
                        })
                    });
                    const result = await response.json();
                    if (result.success) {
                        showMessage('Start stream request sent successfully!');
                    } else {
                        showMessage(result.message || 'Failed to start stream.', true);
                    }
                    // Status will update via polling or future websocket push
                    setTimeout(fetchStreamInfo, 1000); // Fetch after a short delay
                } catch (error) {
                    console.error('Error starting stream:', error);
                    showMessage('Error starting stream.', true);
                }
            });
        }

        if (stopStreamButton) {
            stopStreamButton.addEventListener('click', async () => {
                if (!currentUserId) { showMessage('Not authenticated. Cannot stop stream.', true); return; }
                showMessage('Requesting to stop stream...');
                try {
                    const response = await fetch('/api/stop-stream', {
                        method: 'POST',
                        headers: { 'Content-Type': 'application/json' }
                    });
                    const result = await response.json();
                    if (result.success) {
                        showMessage('Stop stream request sent successfully!');
                        stopHlsPlayer(); // Stop the player immediately
                    } else {
                        showMessage(result.message || 'Failed to stop stream.', true);
                    }
                    setTimeout(fetchStreamInfo, 1000); // Fetch after a short delay
                } catch (error) {
                    console.error('Error stopping stream:', error);
                    showMessage('Error stopping stream.', true);
                }
            });
        }

        if (refreshFacesButton) {
            refreshFacesButton.addEventListener('click', async () => {
                await fetchDetectedFaces();
            });
        }

        // Initial fetch and periodic refresh
        fetchStreamInfo();
        setInterval(fetchStreamInfo, 5000); // Refresh every 5 seconds

        // Fetch faces initially and periodically if face highlighting is enabled
        if (faceHighlightingEnabled) {
            fetchDetectedFaces();
            setInterval(() => {
                if (faceHighlightingEnabled) {
                    fetchDetectedFaces();
                }
            }, 10000); // Refresh faces every 10 seconds
        }

        // Update status text on load
        const initialStatus = <%- JSON.stringify(streamStatus || null) %>;
        updateStatusText(initialStatus);

        // Initialize HLS player if URL is already available
        if (currentHlsUrl) {
            initializeHlsPlayer(currentHlsUrl);
        }

    </script>
</body>
</html>